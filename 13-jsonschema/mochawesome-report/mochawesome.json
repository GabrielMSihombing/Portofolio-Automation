{
  "stats": {
    "suites": 8,
    "tests": 14,
    "passes": 12,
    "pending": 0,
    "failures": 2,
    "start": "2024-09-25T13:37:26.139Z",
    "end": "2024-09-25T13:37:31.541Z",
    "duration": 5402,
    "testsRegistered": 14,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0c45b898-d618-46b0-87d3-8fe1fd601559",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca579f0f-a9ce-46c9-8a83-8d7e6c1a12f6",
          "title": "DELETE API",
          "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\delete.spec.js",
          "file": "\\src\\specs\\delete.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5f4afafd-4ee7-47c0-b026-226f0cc8240b",
              "title": "/DELETE/ - DELETE User",
              "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\delete.spec.js",
              "file": "\\src\\specs\\delete.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check valid response status code",
                  "fullTitle": "DELETE API /DELETE/ - DELETE User check valid response status code",
                  "timedOut": false,
                  "duration": 525,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_User_Schema(2);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "9f566d34-2ee5-491a-9478-3f89b2af2dfa",
                  "parentUUID": "5f4afafd-4ee7-47c0-b026-226f0cc8240b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check jsonSchema",
                  "fullTitle": "DELETE API /DELETE/ - DELETE User check jsonSchema",
                  "timedOut": false,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_User_Schema(2);\nexpect(res.status).to.be.jsonSchema(delete_schema);",
                  "err": {},
                  "uuid": "43e9c56f-c0e7-47c9-87d5-0cdad4510ac8",
                  "parentUUID": "5f4afafd-4ee7-47c0-b026-226f0cc8240b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f566d34-2ee5-491a-9478-3f89b2af2dfa",
                "43e9c56f-c0e7-47c9-87d5-0cdad4510ac8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 948,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40b1f0bd-4089-4df7-86b5-a520eaf9fc23",
          "title": "GET API",
          "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\get.spec.js",
          "file": "\\src\\specs\\get.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "274b8f6d-f335-4846-952c-40af65b30b58",
              "title": "/GET/<ID> - Get Single Todo",
              "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\get.spec.js",
              "file": "\\src\\specs\\get.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check valid response status code",
                  "fullTitle": "GET API /GET/<ID> - Get Single Todo check valid response status code",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await get_single_user(1)\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "a02f770a-f1f8-42d2-b73d-817cf333f86c",
                  "parentUUID": "274b8f6d-f335-4846-952c-40af65b30b58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid response json schema",
                  "fullTitle": "GET API /GET/<ID> - Get Single Todo check valid response json schema",
                  "timedOut": false,
                  "duration": 415,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await get_single_user(2)\n    expect(res.data).to.be.jsonSchema(get_single_schema)",
                  "err": {},
                  "uuid": "0330152b-ebd1-401d-bcb4-10331df0d130",
                  "parentUUID": "274b8f6d-f335-4846-952c-40af65b30b58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get nonexistent todo with ID 999",
                  "fullTitle": "GET API /GET/<ID> - Get Single Todo get nonexistent todo with ID 999",
                  "timedOut": false,
                  "duration": 397,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n     await get_single_user(999)\n     throw Error\n     \n} catch (err) {\n     expect(err?.response?.status).to.equal(404)\n}",
                  "err": {},
                  "uuid": "de90e309-2aa5-4ab0-a4b6-7cbd5da4d9b4",
                  "parentUUID": "274b8f6d-f335-4846-952c-40af65b30b58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get nonexistent todo with ID 0",
                  "fullTitle": "GET API /GET/<ID> - Get Single Todo get nonexistent todo with ID 0",
                  "timedOut": false,
                  "duration": 400,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n     await get_single_user(0)\n     throw Error\n     \n} catch (err) {\n     expect(err?.response?.status).to.equal(404)\n}",
                  "err": {},
                  "uuid": "66634680-5000-4d86-b4a7-92cadcb40b2e",
                  "parentUUID": "274b8f6d-f335-4846-952c-40af65b30b58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a02f770a-f1f8-42d2-b73d-817cf333f86c",
                "0330152b-ebd1-401d-bcb4-10331df0d130",
                "de90e309-2aa5-4ab0-a4b6-7cbd5da4d9b4",
                "66634680-5000-4d86-b4a7-92cadcb40b2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1244,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9d81d958-9406-40e6-a433-b800bb649ef2",
          "title": "POST API",
          "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\post.spec.js",
          "file": "\\src\\specs\\post.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e09f2788-9850-4cd4-ae6f-ad6256f016ca",
              "title": "/POST/ - Post User",
              "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\post.spec.js",
              "file": "\\src\\specs\\post.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check valid response status code",
                  "fullTitle": "POST API /POST/ - Post User check valid response status code",
                  "timedOut": false,
                  "duration": 390,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createUser(payloadUser);\nexpect(res.status).to.equal(201);",
                  "err": {},
                  "uuid": "a5476449-66bf-40d5-9fdd-6f056ffc5fe6",
                  "parentUUID": "e09f2788-9850-4cd4-ae6f-ad6256f016ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid jsonSchema",
                  "fullTitle": "POST API /POST/ - Post User check valid jsonSchema",
                  "timedOut": false,
                  "duration": 383,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createUser(payloadUser);\n            expect(res.data).to.be.jsonSchema(post_user_schema)",
                  "err": {},
                  "uuid": "180321d1-56c2-4ee0-b111-269b8115cdbe",
                  "parentUUID": "e09f2788-9850-4cd4-ae6f-ad6256f016ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid when the name is number",
                  "fullTitle": "POST API /POST/ - Post User check valid when the name is number",
                  "timedOut": false,
                  "duration": 404,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createUser(payloadUser2);\n            expect(res.data).to.be.jsonSchema(post_user_schema)",
                  "err": {},
                  "uuid": "beb52bf2-5192-4462-93d5-d64e30087898",
                  "parentUUID": "e09f2788-9850-4cd4-ae6f-ad6256f016ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid when the name null",
                  "fullTitle": "POST API /POST/ - Post User check valid when the name null",
                  "timedOut": false,
                  "duration": 384,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createUser(payloadUser3);\n            expect(res.data).to.be.jsonSchema(post_user_schema)",
                  "err": {},
                  "uuid": "bbd75550-b394-43a8-8b9d-5fdf83b9452a",
                  "parentUUID": "e09f2788-9850-4cd4-ae6f-ad6256f016ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5476449-66bf-40d5-9fdd-6f056ffc5fe6",
                "180321d1-56c2-4ee0-b111-269b8115cdbe",
                "beb52bf2-5192-4462-93d5-d64e30087898",
                "bbd75550-b394-43a8-8b9d-5fdf83b9452a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1561,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d820d175-4b6d-4629-bd1e-c49b67871994",
          "title": "PUT API",
          "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\put.spec.js",
          "file": "\\src\\specs\\put.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9ea8aec-1792-41fe-8596-5b5376259eed",
              "title": "/PUT/ - Update User",
              "fullFile": "D:\\Bootcamp_QA\\tugas-gabriel\\13-jsonschema\\src\\specs\\put.spec.js",
              "file": "\\src\\specs\\put.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check valid response status code",
                  "fullTitle": "PUT API /PUT/ - Update User check valid response status code",
                  "timedOut": false,
                  "duration": 407,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_User_Schema(2, validupdateUser);\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "da2941f8-d670-4bf9-a75a-df2a468cc95b",
                  "parentUUID": "a9ea8aec-1792-41fe-8596-5b5376259eed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid jsonSchema",
                  "fullTitle": "PUT API /PUT/ - Update User check valid jsonSchema",
                  "timedOut": false,
                  "duration": 425,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_User_Schema(2, validupdateUser);\n            console.log (res.data)\n            expect(res.data).to.be.jsonSchema(put_user_schema)",
                  "err": {},
                  "uuid": "ac44a2c8-af90-4834-a5cd-9ad6dcc62b06",
                  "parentUUID": "a9ea8aec-1792-41fe-8596-5b5376259eed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check valid update when the name is null",
                  "fullTitle": "PUT API /PUT/ - Update User check valid update when the name is null",
                  "timedOut": false,
                  "duration": 399,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_User_Schema(2, invalidupdateUser);\n            expect(res.data).to.be.jsonSchema(put_user_schema)",
                  "err": {
                    "message": "AssertionError: expected data to match json-schema\ndata/name must be string",
                    "estack": "AssertionError: expected data to match json-schema\ndata/name must be string\n    at Context.<anonymous> (file:///D:/Bootcamp_QA/tugas-gabriel/13-jsonschema/src/specs/put.spec.js:35:36)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "61b932fc-d054-4ebc-9cfe-04ef4a6c456f",
                  "parentUUID": "a9ea8aec-1792-41fe-8596-5b5376259eed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check update data with parameter id is 999",
                  "fullTitle": "PUT API /PUT/ - Update User Check update data with parameter id is 999",
                  "timedOut": false,
                  "duration": 387,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    const res = await update_User_Schema(999, validupdateUser);\n    throw res    \n     } catch (err) {\n       expect(err?.response?.status).to.equal(404)\n    }",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 404",
                    "estack": "AssertionError: expected undefined to equal 404\n    at Context.<anonymous> (file:///D:/Bootcamp_QA/tugas-gabriel/13-jsonschema/src/specs/put.spec.js:44:53)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "a976f2ba-3054-48ca-93ca-7c3517a03fb2",
                  "parentUUID": "a9ea8aec-1792-41fe-8596-5b5376259eed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da2941f8-d670-4bf9-a75a-df2a468cc95b",
                "ac44a2c8-af90-4834-a5cd-9ad6dcc62b06"
              ],
              "failures": [
                "61b932fc-d054-4ebc-9cfe-04ef4a6c456f",
                "a976f2ba-3054-48ca-93ca-7c3517a03fb2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1618,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}